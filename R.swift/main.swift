//
//  main.swift
//  R.swift
//
//  Created by Mathijs Kadijk on 11-12-14.
//  From: https://github.com/mac-cain13/R.swift
//  License: MIT License
//

import Foundation

let IndentationString = "  "

let ResourceFilename = "R.generated.swift"

private let Header = [
  "// This is a generated file, do not edit!",
  "// Generated by R.swift, see https://github.com/mac-cain13/R.swift",
  ].joined(separator: "\n")

do {
  let callInformation = try CallInformation(processInfo: ProcessInfo.processInfo)

  let xcodeproj = try Xcodeproj(url: callInformation.xcodeprojURL)
  let resourceURLs = try xcodeproj.resourcePathsForTarget(targetName: callInformation.targetName)
    .map(pathResolverWithSourceTreeFolderToURLConverter(URLForSourceTreeFolder: callInformation.URLForSourceTreeFolder))
    .flatMap { $0 }

  let resources = Resources(resourceURLs: resourceURLs, fileManager: FileManager.default)

  let (internalStruct, externalStruct) = generateResourceStructsWithResources(resources: resources, bundleIdentifier: callInformation.bundleIdentifier)

  let usedModules = [internalStruct, externalStruct]
    .flatMap(getUsedTypes)
    .map { $0.type.module }

  let imports = Set(usedModules)
    .subtracting([Module.Custom(name: callInformation.productModuleName), Module.Host, Module.StdLib])
    .sorted { $0.description < $1.description }
    .map { "import \($0)" }
    .joined(separator: "\n")

  let fileContents = [
      Header,
      imports,
      externalStruct.description,
      internalStruct.description,
    ].joined(separator: "\n\n")

  // Write file if we have changes
  let currentFileContents = String(contentsOfURL: callInformation.outputURL, encoding: String.Encoding.utf8)
  if currentFileContents != fileContents  {
    do {
      try fileContents.write(to: callInformation.outputURL, atomically: true, encoding: String.Encoding.utf8)
    } catch let error as NSError {
      fail(error: error.description)
    }
  }

} catch let error as InputParsingError {
  if let errorDescription = error.errorDescription {
    fail(error: errorDescription)
  }

  print(error.helpString)

  switch error {
  case .IllegalOption, .MissingOption:
    exit(2)
  case .UserAskedForHelp, .UserRequestsVersionInformation:
    exit(0)
  }
} catch let error as ResourceParsingError {
  switch error {
  case let .ParsingFailed(description):
    fail(error: description)
  case let .UnsupportedExtension(givenExtension, supportedExtensions):
    let joinedSupportedExtensions = supportedExtensions.joined(separator: ", ")
    fail(error: "File extension '\(givenExtension)' is not one of the supported extensions: \(joinedSupportedExtensions)")
  }

  exit(3)
}
